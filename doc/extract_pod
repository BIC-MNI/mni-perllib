#!/usr/local/bin/perl5 -w

# ------------------------------ MNI Header ----------------------------------
#@NAME       : extract_pod
#@INPUT      : 
#@OUTPUT     : 
#@RETURNS    : 
#@DESCRIPTION: Extracts pod documentation from a Perl source file.
#@METHOD     : 
#@GLOBALS    : 
#@CALLERS    : 
#@CALLS      : 
#@CREATED    : 1997/08/27, Greg Ward
#@MODIFIED   : 
#@VERSION    : $Id: extract_pod,v 1.1 1999-05-12 20:38:13 stever Exp $
#@COMMENTS   : This bears a striking similarty to split_perl, which has
#              the opposite effect (strip pod and comments from a source
#              file).  Ought to be a way to merge the two...
#-----------------------------------------------------------------------------

use strict;
use Getopt::Std;

# options:
#   -x     case-insensitive regex to exclude a '=head1' section

$::opt_x = '';                          # to shut up -w
getopts ('x:');
my $exclude_re = $::opt_x;

die "Usage: extract_pod infile [outfile]\n"
   if @ARGV < 1 || @ARGV > 2;
my ($in, $out) = @ARGV;

open (IN, $in) || die "couldn't open $in: $!\n";

if ($out)
{
   open (OUT, ">$out") || die "couldn't create $out: $!\n";
   select OUT;
}

my $in_pod = 0;                         # in a POD block?
my $skip_pod = 0;                       # and skipping it?
my $between_chunks = 1;                 # eligible to start a POD block? 

while (<IN>)
{
   # First, see if this line is a pod directive (regardless of whether
   # we're currently in a pod block or not!)

   my ($cmd, $rest);
   if ($between_chunks && (($cmd, $rest) = /^=(\w+)\s*(.*)/))
   {
      $in_pod = 1;
      $skip_pod = (defined $exclude_re && 
                   $cmd eq 'head1' && 
                   $rest =~ /$exclude_re/io);
   }
   
   
   if ($in_pod)
   {
      if (/^=cut/)                      # end of pod block
         { $in_pod = 0; }
      else                              # in the middle of a pod block
         { print unless $skip_pod; }
   }
   else
   {
      # do nothing (ie. skip code, comments, extraneous blank lines)
   }

} continue { $between_chunks = /^\s*$/; }
